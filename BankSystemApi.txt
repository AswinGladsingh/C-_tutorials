/BankSystemApi
  |-- /Controllers
  |   |-- BankController.cs
  |   |-- CashServiceController.cs
  |   |-- LoanServiceController.cs
  |   |-- AccountSummaryController.cs
  |-- /Models
  |   |-- User.cs
  |   |-- LogEntry.cs
  |   |-- TokenResponse.cs
  |   |-- UserQueueStatus.cs
  |   |-- ServiceRequest.cs
  |-- /Services
  |   |-- MsmqService.cs
  |   |-- QueueProcessorService.cs
  |   |-- TokenService.cs
  |   |-- LoggerService.cs
  |-- /Data
  |   |-- BankSystemContext.cs
  |   |-- LoggingDataContext.cs
  |-- log4net.config
  |-- Startup.cs
  |-- appsettings.json
  |-- Program.cs
  |-- BankSystemApi.csproj
1. Models
Models/User.cs
csharp
Copy code
using System.ComponentModel.DataAnnotations;

namespace BankSystemApi.Models
{
    public class User
    {
        public int Id { get; set; }
        [Required]
        public string Name { get; set; }
        [Required]
        public string AccountNumber { get; set; }
        public decimal Amount { get; set; }
        public string QueueName { get; set; }
        public string Status { get; set; }
    }
}
Models/LogEntry.cs
csharp
Copy code
using System;

namespace BankSystemApi.Models
{
    public class LogEntry
    {
        public int Id { get; set; }
        public string Level { get; set; }
        public string Logger { get; set; }
        public string Message { get; set; }
        public string Exception { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
Models/TokenResponse.cs
csharp
Copy code
namespace BankSystemApi.Models
{
    public class TokenResponse
    {
        public string Token { get; set; }
    }
}
Models/UserQueueStatus.cs
csharp
Copy code
using System;

namespace BankSystemApi.Models
{
    public class UserQueueStatus
    {
        public int Id { get; set; }
        public string UserName { get; set; }
        public string QueueName { get; set; }
        public string Status { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
Models/ServiceRequest.cs
csharp
Copy code
namespace BankSystemApi.Models
{
    public class ServiceRequest
    {
        public int Id { get; set; }
        public string ServiceType { get; set; }
        public decimal Amount { get; set; }
        public string UserName { get; set; }
        public string Status { get; set; }
    }
}
2. Data Contexts
Data/BankSystemContext.cs
csharp
Copy code
using Microsoft.EntityFrameworkCore;
using BankSystemApi.Models;

namespace BankSystemApi.Data
{
    public class BankSystemContext : DbContext
    {
        public BankSystemContext(DbContextOptions<BankSystemContext> options)
            : base(options)
        {
        }

        public DbSet<User> Users { get; set; }
        public DbSet<ServiceRequest> ServiceRequests { get; set; }
    }
}
Data/LoggingDataContext.cs
csharp
Copy code
using Microsoft.EntityFrameworkCore;
using BankSystemApi.Models;

namespace BankSystemApi.Data
{
    public class LoggingDataContext : DbContext
    {
        public LoggingDataContext(DbContextOptions<LoggingDataContext> options)
            : base(options)
        {
        }

        public DbSet<LogEntry> Logs { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LogEntry>(entity =>
            {
                entity.ToTable("logs");
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Level).IsRequired().HasMaxLength(50);
                entity.Property(e => e.Logger).IsRequired().HasMaxLength(255);
                entity.Property(e => e.Message).IsRequired();
                entity.Property(e => e.Exception);
                entity.Property(e => e.Timestamp).IsRequired();
            });
        }
    }
}
3. Services
Services/TokenService.cs
csharp
Copy code
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;

namespace BankSystemApi.Services
{
    public class TokenService
    {
        private readonly string _jwtKey;

        public TokenService(string jwtKey)
        {
            _jwtKey = jwtKey;
        }

        public string GenerateToken(string username)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_jwtKey);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, username) }),
                Expires = DateTime.UtcNow.AddMinutes(30),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}
Services/MsmqService.cs
csharp
Copy code
using System.Messaging;
using BankSystemApi.Models;

namespace BankSystemApi.Services
{
    public class MsmqService
    {
        private readonly string _queuePath;

        public MsmqService(string queuePath)
        {
            _queuePath = queuePath;
        }

        public void SendMessage(ServiceRequest request)
        {
            if (!MessageQueue.Exists(_queuePath))
            {
                MessageQueue.Create(_queuePath);
            }

            using (var messageQueue = new MessageQueue(_queuePath))
            {
                messageQueue.Formatter = new XmlMessageFormatter(new Type[] { typeof(ServiceRequest) });
                messageQueue.Send(request);
            }
        }

        public ServiceRequest ReceiveMessage()
        {
            if (MessageQueue.Exists(_queuePath))
            {
                using (var messageQueue = new MessageQueue(_queuePath))
                {
                    messageQueue.Formatter = new XmlMessageFormatter(new Type[] { typeof(ServiceRequest) });
                    var message = messageQueue.Receive();
                    return (ServiceRequest)message.Body;
                }
            }

            return null;
        }
    }
}
Services/QueueProcessorService.cs
csharp
Copy code
using System;
using System.Collections.Generic;
using System.Linq;
using BankSystemApi.Models;
using BankSystemApi.Data;
using Microsoft.Extensions.Logging;

namespace BankSystemApi.Services
{
    public class QueueProcessorService
    {
        private readonly BankSystemContext _context;
        private readonly LoggingDataContext _loggingContext;
        private readonly ILogger<QueueProcessorService> _logger;
        private readonly MsmqService _msmqService;

        public QueueProcessorService(
            BankSystemContext context,
            LoggingDataContext loggingContext,
            ILogger<QueueProcessorService> logger,
            MsmqService msmqService)
        {
            _context = context;
            _loggingContext = loggingContext;
            _logger = logger;
            _msmqService = msmqService;
        }

        public void ProcessQueue(string serviceType)
        {
            var requests = _context.ServiceRequests
                .Where(r => r.ServiceType == serviceType)
                .OrderByDescending(r => r.Amount)
                .ToList();

            foreach (var request in requests)
            {
                _msmqService.SendMessage(request);
                LogEvent($"Request from {request.UserName} for {request.ServiceType} added to queue.");
            }
        }

        private void LogEvent(string message)
        {
            var logEntry = new LogEntry
            {
                Level = "INFO",
                Logger = "QueueProcessorService",
                Message = message,
                Timestamp = DateTime.UtcNow
            };

            _loggingContext.Logs.Add(logEntry);
            _loggingContext.SaveChanges();
            _logger.LogInformation(message);
        }
    }
}
Services/LoggerService.cs
csharp
Copy code
using System;
using BankSystemApi.Data;
using BankSystemApi.Models;
using Microsoft.Extensions.Logging;

namespace BankSystemApi.Services
{
    public class LoggerService
    {
        private readonly LoggingDataContext _loggingContext;
        private readonly ILogger<LoggerService> _logger;

        public LoggerService(LoggingDataContext loggingContext, ILogger<LoggerService> logger)
        {
            _loggingContext = loggingContext;
            _logger = logger;
        }

        public void Log(string level, string message, string exception = null)
        {
            var logEntry = new LogEntry
            {
                Level = level,
                Logger = "LoggerService",
                Message = message,
                Exception = exception,
                Timestamp = DateTime.UtcNow
            };

            _loggingContext.Logs.Add(logEntry);
            _loggingContext.SaveChanges();
            _logger.LogInformation(message);
        }
    }
}
4. Controllers
Controllers/BankController.cs
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using BankSystemApi.Models;
using BankSystemApi.Services;
using BankSystemApi.Data;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;

namespace BankSystemApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class BankController : ControllerBase
    {
        private readonly BankSystemContext _context;
        private readonly TokenService _tokenService;
        private readonly QueueProcessorService _queueProcessorService;
        private readonly LoggerService _loggerService;

        public BankController(BankSystemContext context, TokenService tokenService, QueueProcessorService queueProcessorService, LoggerService loggerService)
        {
            _context = context;
            _tokenService = tokenService;
            _queueProcessorService = queueProcessorService;
            _loggerService = loggerService;
        }

        [HttpPost("login")]
        public IActionResult Login([FromBody] User user)
        {
            if (user.Name != null && user.AccountNumber != null)
            {
                var token = _tokenService.GenerateToken(user.Name);
                return Ok(new TokenResponse { Token = token });
            }

            return Unauthorized();
        }

        [HttpGet("queue")]
        public async Task<IActionResult> GetQueue()
        {
            var users = await _context.Users.OrderByDescending(u => u.Amount).ToListAsync();
            return Ok(users);
        }

        [HttpPost("queue")]
        public async Task<IActionResult> AddToQueue([FromBody] User user)
        {
            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            _queueProcessorService.ProcessQueue(user.QueueName);

            _loggerService.Log("INFO", $"User {user.Name} with AccountNumber {user.AccountNumber} added to queue.");
            return Ok(user);
        }
    }
}
Controllers/CashServiceController.cs
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using BankSystemApi.Models;
using BankSystemApi.Services;
using BankSystemApi.Data;
using System.Threading.Tasks;

namespace BankSystemApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CashServiceController : ControllerBase
    {
        private readonly BankSystemContext _context;
        private readonly QueueProcessorService _queueProcessorService;
        private readonly LoggerService _loggerService;

        public CashServiceController(BankSystemContext context, QueueProcessorService queueProcessorService, LoggerService loggerService)
        {
            _context = context;
            _queueProcessorService = queueProcessorService;
            _loggerService = loggerService;
        }

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] ServiceRequest request)
        {
            request.ServiceType = "Cash";
            _context.ServiceRequests.Add(request);
            await _context.SaveChangesAsync();

            _queueProcessorService.ProcessQueue(request.ServiceType);
            _loggerService.Log("INFO", $"Cash request from {request.UserName} added to queue.");

            return Ok(request);
        }
    }
}
Controllers/LoanServiceController.cs
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using BankSystemApi.Models;
using BankSystemApi.Services;
using BankSystemApi.Data;
using System.Threading.Tasks;

namespace BankSystemApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class LoanServiceController : ControllerBase
    {
        private readonly BankSystemContext _context;
        private readonly QueueProcessorService _queueProcessorService;
        private readonly LoggerService _loggerService;

        public LoanServiceController(BankSystemContext context, QueueProcessorService queueProcessorService, LoggerService loggerService)
        {
            _context = context;
            _queueProcessorService = queueProcessorService;
            _loggerService = loggerService;
        }

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] ServiceRequest request)
        {
            request.ServiceType = "Loan";
            _context.ServiceRequests.Add(request);
            await _context.SaveChangesAsync();

            _queueProcessorService.ProcessQueue(request.ServiceType);
            _loggerService.Log("INFO", $"Loan request from {request.UserName} added to queue.");

            return Ok(request);
        }
    }
}
Controllers/AccountSummaryController.cs
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using BankSystemApi.Models;
using BankSystemApi.Services;
using BankSystemApi.Data;
using System.Threading.Tasks;

namespace BankSystemApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AccountSummaryController : ControllerBase
    {
        private readonly BankSystemContext _context;
        private readonly QueueProcessorService _queueProcessorService;
        private readonly LoggerService _loggerService;

        public AccountSummaryController(BankSystemContext context, QueueProcessorService queueProcessorService, LoggerService loggerService)
        {
            _context = context;
            _queueProcessorService = queueProcessorService;
            _loggerService = loggerService;
        }

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] ServiceRequest request)
        {
            request.ServiceType = "AccountSummary";
            _context.ServiceRequests.Add(request);
            await _context.SaveChangesAsync();

            _queueProcessorService.ProcessQueue(request.ServiceType);
            _loggerService.Log("INFO", $"Account summary request from {request.UserName} added to queue.");

            return Ok(request);
        }
    }
}
5. Configuration and Initialization
log4net.config
xml
Copy code
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>
  <log4net>
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date{ISO8601} [%thread] %-5level %logger - %message%newline" />
      </layout>
    </appender>
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="logs/logfile.log" />
      <appendToFile value="true" />
      <maximumFileSize value="10MB" />
      <maxSizeRollBackups value="5" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date{ISO8601} [%thread] %-5level %logger - %message%newline" />
      </layout>
    </appender>
    <root>
      <level value="INFO" />
      <appender-ref ref="ConsoleAppender" />
      <appender-ref ref="RollingFileAppender" />
    </root>
  </log4net>
</configuration>
appsettings.json
json
Copy code
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Database=bank_system;Username=postgres;Password=password",
    "LoggingDatabase": "Host=localhost;Database=logging_db;Username=postgres;Password=password"
  },
  "Jwt": {
    "Key": "ThisIsASampleJwtKeyForDevelopmentPurposes"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}
Startup.cs
csharp
Copy code
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using BankSystemApi.Data;
using BankSystemApi.Services;
using Microsoft.EntityFrameworkCore;
using log4net;
using log4net.Config;
using System.IO;
using Microsoft.Extensions.Logging;

namespace BankSystemApi
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<BankSystemContext>(options =>
                options.UseNpgsql(Configuration.GetConnectionString("DefaultConnection")));

            services.AddDbContext<LoggingDataContext>(options =>
                options.UseNpgsql(Configuration.GetConnectionString("LoggingDatabase")));

            services.AddControllers();

            services.AddSingleton(new TokenService(Configuration["Jwt:Key"]));
            services.AddSingleton(new MsmqService(@".\Private$\BankQueue"));
            services.AddTransient<QueueProcessorService>();
            services.AddTransient<LoggerService>();

            services.AddLogging(logging =>
            {
                logging.ClearProviders();
                logging.AddLog4Net();
            });
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            var logRepository = LogManager.GetRepository(System.Reflection.Assembly.GetEntryAssembly());
            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));
        }
    }
}
Program.cs
csharp
Copy code
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

namespace BankSystemApi
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
6. PostgreSQL Table Creation
You need to create the necessary tables in your PostgreSQL database.

Users Table
sql
Copy code
CREATE TABLE Users (
    Id SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    AccountNumber VARCHAR(50) NOT NULL,
    Amount DECIMAL(18, 2) NOT NULL,
    QueueName VARCHAR(50),
    Status VARCHAR(50)
);
ServiceRequests Table
sql
Copy code
CREATE TABLE ServiceRequests (
    Id SERIAL PRIMARY KEY,
    ServiceType VARCHAR(50) NOT NULL,
    Amount DECIMAL(18, 2) NOT NULL,
    UserName VARCHAR(100),
    Status VARCHAR(50)
);
LogEntries Table
sql
Copy code
CREATE TABLE Logs (
    Id SERIAL PRIMARY KEY,
    Level VARCHAR(50) NOT NULL,
    Logger VARCHAR(255) NOT NULL,
    Message TEXT NOT NULL,
    Exception TEXT,
    Timestamp TIMESTAMPTZ NOT NULL
);
HTTP Requests
The following are example HTTP requests for interacting with the API:

Login and Token Generation

Endpoint: POST /api/Bank/login
Body: { "name": "user_name", "accountNumber": "user_account_number" }
Add User to Queue

Endpoint: POST /api/Bank/queue
Body: { "name": "user_name", "accountNumber": "user_account_number", "amount": amount, "queueName": "queue_name", "status": "status" }
Service Requests (Cash, Loan, Account Summary)

Endpoint: POST /api/CashService or /api/LoanService or /api/AccountSummary
Body: { "serviceType": "Cash", "amount": amount, "userName": "user_name", "status": "status" }
This completes the implementation of the bank's open walk-in system with MSMQ, JWT token generation, priority queue handling, and logging.


for jwt what can i do here
ChatGPT
To implement JWT (JSON Web Token) authentication in your .NET application, follow these steps:

1. Install the Necessary Packages
Ensure you have the following NuGet packages installed in your project:

Microsoft.AspNetCore.Authentication.JwtBearer
System.IdentityModel.Tokens.Jwt
You can install these packages via NuGet Package Manager or using the Package Manager Console:

bash
Copy code
Install-Package Microsoft.AspNetCore.Authentication.JwtBearer
Install-Package System.IdentityModel.Tokens.Jwt
2. Configure JWT Authentication
In your Startup.cs file, configure JWT authentication:

ConfigureServices Method
csharp
Copy code
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

public void ConfigureServices(IServiceCollection services)
{
    // Other service configurations...

    // JWT Authentication Configuration
    var key = Encoding.ASCII.GetBytes(Configuration["Jwt:Key"]);
    services.AddAuthentication(options =>
    {
        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    })
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ValidateIssuer = false,
            ValidateAudience = false,
            ValidateLifetime = true
        };
    });

    // Other service configurations...
}
Configure Method
In the Configure method, add the authentication middleware:

csharp
Copy code
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    // Other middleware...

    app.UseRouting();

    app.UseAuthentication();
    app.UseAuthorization();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
    });
}
3. Token Generation in TokenService
Here is an example of how to generate JWT tokens in your TokenService:

csharp
Copy code
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace BankSystemApi.Services
{
    public class TokenService
    {
        private readonly string _secretKey;

        public TokenService(string secretKey)
        {
            _secretKey = secretKey;
        }

        public string GenerateToken(string username)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, username)
                }),
                Expires = DateTime.UtcNow.AddHours(1),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}
4. Securing Your Controllers
To secure your API endpoints, use the [Authorize] attribute on your controllers or specific actions:

csharp
Copy code
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace BankSystemApi.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class BankController : ControllerBase
    {
        // Controller actions
    }
}
This will ensure that only authenticated users can access the endpoints.

5. Testing JWT Authentication
Login and Generate Token: Call the login endpoint (/api/Bank/login) with a valid user. The response will include a JWT token.
Use Token in Requests: Include the token in the Authorization header of your requests to the secured endpoints.
Example using Postman or any HTTP client:

makefile
Copy code
Authorization: Bearer <Your_JWT_Token_Here>
By following these steps, your .NET application will implement JWT authentication, ensuring secure access to the API endpoints.

how to generate token and implement
ChatGPT
To generate and implement JWT tokens in your .NET application, you need to follow several steps, including configuring JWT authentication, creating a token generation service, and securing your API endpoints. Here's a detailed guide:

1. Install Necessary Packages
Ensure you have installed the required packages:

Microsoft.AspNetCore.Authentication.JwtBearer
System.IdentityModel.Tokens.Jwt
You can install them using NuGet Package Manager or the Package Manager Console:

bash
Copy code
Install-Package Microsoft.AspNetCore.Authentication.JwtBearer
Install-Package System.IdentityModel.Tokens.Jwt
2. Configure JWT Authentication in Startup.cs
Add the following configuration in your Startup.cs file.

ConfigureServices Method
In the ConfigureServices method, configure the JWT authentication:

csharp
Copy code
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

public void ConfigureServices(IServiceCollection services)
{
    // Other service configurations...

    // JWT Authentication Configuration
    var key = Encoding.ASCII.GetBytes(Configuration["Jwt:Key"]);
    services.AddAuthentication(options =>
    {
        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    })
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ValidateIssuer = false,
            ValidateAudience = false,
            ValidateLifetime = true
        };
    });

    // Other service configurations...
}
Ensure that your appsettings.json contains the JWT key:

json
Copy code
"Jwt": {
  "Key": "ThisIsASampleJwtKeyForDevelopmentPurposes"
}
Configure Method
In the Configure method, add the authentication middleware:

csharp
Copy code
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    // Other middleware...

    app.UseRouting();

    app.UseAuthentication();
    app.UseAuthorization();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
    });
}
3. Create the Token Generation Service
Create a TokenService class to handle the generation of JWT tokens.

Services/TokenService.cs
csharp
Copy code
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace BankSystemApi.Services
{
    public class TokenService
    {
        private readonly string _secretKey;

        public TokenService(string secretKey)
        {
            _secretKey = secretKey;
        }

        public string GenerateToken(string username)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, username)
                }),
                Expires = DateTime.UtcNow.AddHours(1),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}
4. Use TokenService in Controller for Login
Use the TokenService to generate a token when a user logs in.

Controllers/BankController.cs
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using BankSystemApi.Services;

namespace BankSystemApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class BankController : ControllerBase
    {
        private readonly TokenService _tokenService;

        public BankController(TokenService tokenService)
        {
            _tokenService = tokenService;
        }

        [HttpPost("login")]
        public IActionResult Login([FromBody] User user)
        {
            if (user != null && user.Name != null && user.AccountNumber != null)
            {
                var token = _tokenService.GenerateToken(user.Name);
                return Ok(new { Token = token });
            }

            return Unauthorized();
        }
    }
}
5. Securing API Endpoints
Secure your API endpoints using the [Authorize] attribute. Only authenticated users with a valid JWT token will be able to access these endpoints.

csharp
Copy code
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace BankSystemApi.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class CashServiceController : ControllerBase
    {
        // Controller actions...
    }
}
6. Testing JWT Authentication
Generate Token:

Call the login endpoint (POST /api/Bank/login) with a valid user body. The response will include a JWT token.
Use Token in Requests:

For subsequent requests to protected endpoints, include the token in the Authorization header:
makefile
Copy code
Authorization: Bearer <Your_JWT_Token_Here>
7. Log4Net Configuration (Optional for Logging JWT Events)
To log JWT-related events or any other events, configure Log4Net as shown in the previous message.

Conclusion
This setup ensures that your .NET Core API uses JWT for secure user authentication, allowing only authorized access to specific endpoints. This approach is crucial for securing sensitive operations, such as financial transactions in a banking system.






