[HttpPost("status")]
public async Task<IActionResult> PostStatus([FromBody] ServiceRequest serviceRequest)
{
    // Check if the request body is null
    if (serviceRequest == null)
    {
        return BadRequest("Request body cannot be null.");
    }

    // Check if QueueName is present and valid
    if (string.IsNullOrEmpty(serviceRequest.QueueName))
    {
        return BadRequest("QueueName is required.");
    }

    var validQueueNames = new[] { "Cash", "Loan" }; // List of valid queue names
    if (!validQueueNames.Contains(serviceRequest.QueueName))
    {
        return BadRequest("Invalid QueueName.");
    }

    var now = DateTime.UtcNow;

    // Update the statuses based on elapsed time
    var existingStatuses = await _context.CashStatuses.ToListAsync();

    // Update statuses that have been "Waiting" for more than 5 minutes to "In Queue"
    foreach (var status in existingStatuses
        .Where(s => s.Status == "Waiting" && (now - s.StatusUpdatedAt).TotalMinutes >= 5))
    {
        status.Status = "In Queue";
        status.StatusUpdatedAt = now;
    }

    // Update statuses that have been "In Queue" for more than 30 minutes to "Completed"
    foreach (var status in existingStatuses
        .Where(s => s.Status == "In Queue" && (now - s.StatusUpdatedAt).TotalMinutes >= 30))
    {
        status.Status = "Completed";
        status.StatusUpdatedAt = now;
    }

    _context.CashStatuses.UpdateRange(existingStatuses);
    await _context.SaveChangesAsync();

    // Filter users by service type and order by amount
    var users = await _context.Users
        .Where(u => u.ServiceType == serviceRequest.QueueName)
        .OrderByDescending(u => u.Amount)
        .ToListAsync();

    // Remove old entries
    var existingNames = existingStatuses.Select(s => s.Name).ToList();
    var newUsers = users.Where(u => !existingNames.Contains(u.Name)).ToList();

    // Determine the status based on amount and elapsed time
    var statusList = newUsers.Select((user, index) => new CashStatus
    {
        Name = user.Name,
        Amount = user.Amount,
        Status = (user.Amount > 10000) ? "High Priority" :
                 (index < 4) ? "In Queue" :
                 "Waiting",
        StatusUpdatedAt = now
    }).ToList();

    // Add new statuses to the CashStatus table
    await _context.CashStatuses.AddRangeAsync(statusList);
    await _context.SaveChangesAsync();

    // Reorder the statuses after new entries
    var updatedStatuses = await _context.CashStatuses
        .OrderByDescending(s => s.Amount)
        .ToListAsync();

    // Update the statuses based on the new order
    for (int i = 0; i < updatedStatuses.Count; i++)
    {
        if (i < 4)
        {
            updatedStatuses[i].Status = "In Queue";
        }
        else
        {
            updatedStatuses[i].Status = "Waiting";
        }
    }

    // Update high priority based on the amount
    foreach (var status in updatedStatuses)
    {
        if (status.Amount > 10000)
        {
            status.Status = "High Priority";
        }
    }

    _context.CashStatuses.UpdateRange(updatedStatuses);
    await _context.SaveChangesAsync();

    return Ok(updatedStatuses);
}
