QueueManagementSystem/
│
├── Controllers/
│   ├── CashController.cs
│   ├── LoanController.cs
│   ├── AccountSummaryController.cs
│   └── QueueController.cs
│
├── Data/
│   ├── BankSystemContext.cs
│   └── LoggingDataContext.cs
│
├── Services/
│   ├── MsmqService.cs
│   ├── TokenService.cs
│   ├── QueueProcessorService.cs
│   └── LoggerService.cs
│
├── Models/
│   ├── User.cs
│   ├── Transaction.cs
│   ├── Token.cs
│   └── LogEntry.cs
│
├── Logging/
│   ├── Log4NetProvider.cs
│   └── Log4NetExtensions.cs
│
├── Migrations/
│   ├── <Auto-generated migration files>
│
├── Properties/
│   ├── launchSettings.json
│
├── wwwroot/
│   ├── <Static files if any>
│
├── appsettings.json
├── appsettings.Development.json
├── Program.cs
├── Startup.cs
├── log4net.config
├── QueueManagementSystem.csproj
1. Models
User.cs
csharp
Copy code
public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string AccountNumber { get; set; }
    public decimal Balance { get; set; }
}
Transaction.cs
csharp
Copy code
public class Transaction
{
    public int Id { get; set; }
    public int UserId { get; set; }
    public string ServiceType { get; set; }
    public decimal Amount { get; set; }
    public DateTime CreatedAt { get; set; }

    public User User { get; set; }
}
Token.cs
csharp
Copy code
public class Token
{
    public int Id { get; set; }
    public int UserId { get; set; }
    public string JwtToken { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime ExpiresAt { get; set; }

    public User User { get; set; }
}
LogEntry.cs
csharp
Copy code
public class LogEntry
{
    public int Id { get; set; }
    public string Message { get; set; }
    public DateTime CreatedAt { get; set; }
}
2. Data Contexts
BankSystemContext.cs
csharp
Copy code
public class BankSystemContext : DbContext
{
    public BankSystemContext(DbContextOptions<BankSystemContext> options)
        : base(options)
    {
    }

    public DbSet<User> Users { get; set; }
    public DbSet<Transaction> Transactions { get; set; }
    public DbSet<Token> Tokens { get; set; }
}
LoggingDataContext.cs
csharp
Copy code
public class LoggingDataContext : DbContext
{
    public LoggingDataContext(DbContextOptions<LoggingDataContext> options)
        : base(options)
    {
    }

    public DbSet<LogEntry> LogEntries { get; set; }
}
3. Services
MsmqService.cs
csharp
Copy code
public class MsmqService
{
    private readonly MessageQueue _queue;

    public MsmqService(string queuePath)
    {
        if (!MessageQueue.Exists(queuePath))
        {
            _queue = MessageQueue.Create(queuePath);
        }
        else
        {
            _queue = new MessageQueue(queuePath);
        }

        _queue.Formatter = new XmlMessageFormatter(new Type[] { typeof(string) });
    }

    public void SendMessage(string message)
    {
        _queue.Send(message);
    }

    public string ReceiveMessage()
    {
        var message = _queue.Receive();
        return message.Body.ToString();
    }
}
TokenService.cs
csharp
Copy code
public class TokenService
{
    private readonly string _secretKey;

    public TokenService(string secretKey)
    {
        _secretKey = secretKey;
    }

    public string GenerateToken(User user)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_secretKey);
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[] { new Claim("id", user.Id.ToString()) }),
            Expires = DateTime.UtcNow.AddHours(1),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }
}
QueueProcessorService.cs
csharp
Copy code
public class QueueProcessorService
{
    private readonly BankSystemContext _context;
    private readonly MsmqService _msmqService;

    public QueueProcessorService(BankSystemContext context, MsmqService msmqService)
    {
        _context = context;
        _msmqService = msmqService;
    }

    public async Task<string> HandleRequest(ServiceRequest request)
    {
        var user = await _context.Users.FindAsync(request.UserId);
        if (user == null)
        {
            throw new Exception("User not found.");
        }

        // Prioritize by amount
        var transaction = new Transaction
        {
            UserId = user.Id,
            ServiceType = request.ServiceType,
            Amount = request.Amount,
            CreatedAt = DateTime.UtcNow
        };

        _context.Transactions.Add(transaction);
        await _context.SaveChangesAsync();

        var message = $"{user.Name} requested {request.ServiceType} with amount {request.Amount}.";
        _msmqService.SendMessage(message);

        return message;
    }

    public string GetStatus(int userId)
    {
        var user = _context.Users.Find(userId);
        if (user == null)
        {
            throw new Exception("User not found.");
        }

        var transactions = _context.Transactions
            .Where(t => t.UserId == userId)
            .OrderByDescending(t => t.CreatedAt)
            .ToList();

        return $"User {user.Name} has {transactions.Count} transactions.";
    }
}
LoggerService.cs
csharp
Copy code
public class LoggerService
{
    private readonly LoggingDataContext _context;

    public LoggerService(LoggingDataContext context)
    {
        _context = context;
    }

    public async Task LogEventAsync(string message)
    {
        var logEntry = new LogEntry
        {
            Message = message,
            CreatedAt = DateTime.UtcNow
        };

        _context.LogEntries.Add(logEntry);
        await _context.SaveChangesAsync();
    }
}
4. Controllers
CashController.cs
csharp
Copy code
[ApiController]
[Route("api/[controller]")]
public class CashController : ControllerBase
{
    private readonly QueueProcessorService _queueProcessorService;
    private readonly LoggerService _loggerService;

    public CashController(QueueProcessorService queueProcessorService, LoggerService loggerService)
    {
        _queueProcessorService = queueProcessorService;
        _loggerService = loggerService;
    }

    [HttpPost("withdraw")]
    public async Task<IActionResult> Withdraw([FromBody] ServiceRequest request)
    {
        var message = await _queueProcessorService.HandleRequest(request);
        await _loggerService.LogEventAsync($"Withdraw request: {message}");
        return Ok(new { message });
    }

    [HttpPost("deposit")]
    public async Task<IActionResult> Deposit([FromBody] ServiceRequest request)
    {
        var message = await _queueProcessorService.HandleRequest(request);
        await _loggerService.LogEventAsync($"Deposit request: {message}");
        return Ok(new { message });
    }
}
LoanController.cs
csharp
Copy code
[ApiController]
[Route("api/[controller]")]
public class LoanController : ControllerBase
{
    private readonly QueueProcessorService _queueProcessorService;
    private readonly LoggerService _loggerService;

    public LoanController(QueueProcessorService queueProcessorService, LoggerService loggerService)
    {
        _queueProcessorService = queueProcessorService;
        _loggerService = loggerService;
    }

    [HttpPost("apply")]
    public async Task<IActionResult> ApplyLoan([FromBody] ServiceRequest request)
    {
        var message = await _queueProcessorService.HandleRequest(request);
        await _loggerService.LogEventAsync($"Loan application: {message}");
        return Ok(new { message });
    }

    [HttpPost("repay")]
    public async Task<IActionResult> RepayLoan([FromBody] ServiceRequest request)
    {
        var message = await _queueProcessorService.HandleRequest(request);
        await _loggerService.LogEventAsync($"Loan repayment: {message}");
        return Ok(new { message });
    }
}
AccountSummaryController.cs
csharp
Copy code
[ApiController]
[Route("api/[controller]")]
public class AccountSummaryController : ControllerBase
{
    private readonly BankSystemContext _context;

    public AccountSummaryController(BankSystemContext context)
    {
        _context = context;
    }

    [HttpGet("{userId}")]
    public IActionResult GetAccountSummary(int userId)
    {
        var user = _context.Users.Find(userId);
        if (user == null)
        {
            return NotFound("User not found.");
        }

        var transactions = _context.Transactions
            .Where(t => t.UserId == userId)
            .OrderByDescending(t => t.CreatedAt)
            .ToList();

        return Ok(new { user.Name, user.Balance, Transactions = transactions });
    }
}
QueueController.cs
csharp
Copy code
[ApiController]
[Route("api/[controller]")]
public class QueueController : ControllerBase
{
    private readonly QueueProcessorService _queueProcessorService;

    public QueueController(QueueProcessorService queueProcessorService)
    {
        _queueProcessorService = queueProcessorService;
    }

    [HttpPost("request")]
    public async Task<IActionResult> RequestService([FromBody] ServiceRequest request)
    {
        var token = await _queueProcessorService.HandleRequest(request);
        return Ok(new { token });
    }

    [HttpGet("status/{userId}")]
    public IActionResult GetStatus(int userId)
    {
        var status = _queueProcessorService.GetStatus(userId);
        return Ok(new { status });
    }
}
5. Configuration
log4net.config
xml
Copy code
<?xml version="1.0" encoding="utf-8" ?>
<log4net>
  <root>
    <level value="DEBUG" />
    <appender-ref ref="RollingFileAppender" />
  </root>
  <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
    <file value="Logs/logfile.txt" />
    <appendToFile value="true" />
    <rollingStyle value="Date" />
    <datePattern value="yyyyMMdd" />
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
    </layout>
  </appender>
</log4net>
appsettings.json
json
Copy code
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Database=bank_system;Username=yourusername;Password=yourpassword",
    "LoggingDatabase": "Host=localhost;Database=logging_db;Username=yourusername;Password=yourpassword"
  },
  "Jwt": {
    "Key": "YourSecretKeyHere"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}
Startup.cs
csharp
Copy code
public class Startup
{
    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }

    public IConfiguration Configuration { get; }

    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<BankSystemContext>(options =>
            options.UseNpgsql(Configuration.GetConnectionString("DefaultConnection")));

        services.AddDbContext<LoggingDataContext>(options =>
            options.UseNpgsql(Configuration.GetConnectionString("LoggingDatabase")));

        services.AddControllers();

        services.AddSingleton(new TokenService(Configuration["Jwt:Key"]));
        services.AddSingleton(new MsmqService(@".\Private$\BankQueue"));
        services.AddTransient<QueueProcessorService>();
        services.AddTransient<LoggerService>();

        services.AddSwaggerGen(c =>
        {
            c.SwaggerDoc("v1", new OpenApiInfo { Title = "Queue Management API", Version = "v1" });
        });

        services.AddLogging(logging =>
        {
            logging.ClearProviders();
            logging.AddLog4Net();
        });
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseSwagger();
        app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Queue Management API v1"));

        app.UseRouting();
        app.UseAuthorization();

        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });

        var logRepository = LogManager.GetRepository(System.Reflection.Assembly.GetEntryAssembly());
        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));
    }
}
Program.cs
csharp
Copy code
public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup<Startup>();
            });
}
6. Swagger Setup
Swagger is configured in the Startup.cs file as shown above. When the application runs, you can access the Swagger UI at http://localhost:5000/swagger (assuming default port).

7. HTTP Request Handling
Use Postman or any HTTP client to send requests to the API. Example requests:

Deposit Money

http
Copy code
POST /api/cash/deposit
Content-Type: application/json

{
  "userId": 1,
  "amount": 5000
}
Get Queue Status

http
Copy code
GET /api/queue/status/1
8. File Structure Overview
The provided file structure and code create a comprehensive solution for the queue management system. This system includes priority queue handling, JWT token generation, MSMQ integration, PostgreSQL database interactions, and extensive logging using log4net. Each service and component is designed to fulfill a specific part of the overall functionality, providing a modular and scalable solution.

what are the api service available here
ChatGPT
In the provided queue management system, the following API services are available, corresponding to the different controllers and their associated actions:

1. CashController
Handles cash-related operations, such as withdrawals and deposits.

Withdraw

Method: POST
Endpoint: /api/cash/withdraw
Description: Handles withdrawal requests for a specified amount.
Request Body:
json
Copy code
{
  "userId": 1,
  "amount": 5000
}
Deposit

Method: POST
Endpoint: /api/cash/deposit
Description: Handles deposit requests for a specified amount.
Request Body:
json
Copy code
{
  "userId": 1,
  "amount": 5000
}
2. LoanController
Handles loan-related operations, such as applying for a loan and repaying a loan.

Apply for Loan

Method: POST
Endpoint: /api/loan/apply
Description: Handles loan application requests.
Request Body:
json
Copy code
{
  "userId": 1,
  "amount": 10000
}
Repay Loan

Method: POST
Endpoint: /api/loan/repay
Description: Handles loan repayment requests.
Request Body:
json
Copy code
{
  "userId": 1,
  "amount": 5000
}
3. AccountSummaryController
Provides account summary information for a user.

Get Account Summary
Method: GET
Endpoint: /api/accountsummary/{userId}
Description: Retrieves account summary and transaction details for a specified user.
Parameters:
userId: The ID of the user whose account summary is being requested.
4. QueueController
Manages the queue, including handling service requests and retrieving status.

Request Service

Method: POST
Endpoint: /api/queue/request
Description: Requests a service and generates a token for the request.
Request Body:
json
Copy code
{
  "userId": 1,
  "serviceType": "CashWithdraw",
  "amount": 5000
}
Get Status

Method: GET
Endpoint: /api/queue/status/{userId}
Description: Retrieves the status of the queue for a specific user.
Parameters:
userId: The ID of the user whose status is being queried.
5. Logging
Logs events related to queue management and service requests. The events are logged using log4net, and the logs are stored in both the logfile.txt file and the LogEntries table in the PostgreSQL database.

6. TokenService
Handles JWT token generation for authentication and authorization purposes. The tokens are associated with user service requests to manage queue priority and ensure security.

Each of these services provides functionality related to the queue management system, ensuring that user requests are handled efficiently, prioritized according to their needs, and logged for auditing and tracking purposes. The integration with MSMQ allows for reliable message queuing, ensuring that requests are processed in the correct order and with the appropriate priority.